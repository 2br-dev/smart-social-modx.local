@use "./vars/media" as m;
@use "./vars/grid" as g;
@use './common/helpers';
@use "sass:string";
@use "sass:list";
@use "sass:math";

.container {
	margin: 0 auto;
	width: 95%;
	max-width: m.$huge;

	@media (max-width: m.$medium) {
		width: 100%;
	}

	@media (min-width: m.$medium) {
		width: 90%;
	}

	@media (min-width: m.$large) {
		width: 85%;
	}
}

.col .row {
	margin-left: calc(max(g.$gutter-max, g.$gutter-min) * -1);
	margin-right: calc(max(g.$gutter-max, g.$gutter-min) * -1);
}

.section {
	padding-top: 1rem;
	padding-bottom: 1rem;

	&.no-pad {
		padding: 0;
	}

	&.no-pad-bot {
		padding-bottom: 0;
	}

	&.no-pad-top {
		padding-top: 0;
	}
}

// Mixins to eliminate code repitition
@mixin reset-offset {
	margin-left: 0;
	left: auto;
	right: auto;
}

@mixin gridCol($class) {
	$i: 1;

	@while ($i <= g.$cols) {
		$perc: string.unquote(math.div(100, math.div(g.$cols, $i)) + "%");

		&.#{$class}#{$i} {
			width: $perc;
			@include reset-offset();
		}

		$i: $i + 1;
	}

	$i: 1;

	@while ($i <= g.$cols) {
		$perc: string.unquote(math.div(100, math.div(g.$cols, $i)) + "%");

		&.offset-#{$class}#{$i} {
			margin-left: $perc;
		}

		&.pull-#{$class}#{$i} {
			right: $perc;
		}

		&.push-#{$class}#{$i} {
			left: $perc;
		}

		$i: $i + 1;
	}
}

.row {
	margin-left: auto;
	margin-right: auto;

	&:not(:last-of-type) {
		margin-bottom: 20px;
	}

	&.flex {
		display: flex;
		flex-wrap: wrap;

		& > .col {
			float: none;
			height: unset !important;
		}
	}

	& > .col {
		height: fit-content;
	}

	&.vcenter {
		align-items: center;
	}

	// Clear floating children
	&:after {
		content: "";
		display: table;
		clear: both;
	}

	.col {
		float: left;
		box-sizing: border-box;
		padding-left: max(g.$gutter-max, g.$gutter-min);
		padding-right: max(g.$gutter-max, g.$gutter-min);
		min-height: 1px;
		width: 100%;
		margin-bottom: max(#{g.$gutter-max * 2}, #{g.$gutter-min * 2});

		&[class*="push-"],
		&[class*="pull-"] {
			position: relative;
		}

		//= Tiny rules ==========================================

		@media (max-width: m.$extra-small) {
			@include gridCol("t");
		}

		// //= Extra-small rules ===================================

		@media (min-width: m.$extra-small) {
			@include gridCol("xs");
		}

		// //= Small rules =========================================
		@media (min-width: m.$small) {
			@include gridCol("s");
		}

		// //= Medium rules =========================================
		@media (min-width: m.$medium) {
			@include gridCol("m");
		}

		// //= Large rules ==========================================
		@media (min-width: m.$large) {
			@include gridCol("l");
		}

		// //= Extra-large rules ====================================
		@media (min-width: m.$extra-large) {
			@include gridCol("xl");
		}

		// //= Huge rules ====================================
		@media (min-width: m.$huge) {
			@include gridCol("h");
		}
	}

	&.flex {
		display: flex;
		flex-wrap: wrap;

		& > .col {
			float: none;
		}
	}
}

